name: Healthcare DevOps Pipeline

# When to run this pipeline
on:
  push:
    branches: [main, devops-pipeline]
  pull_request:
    branches: [main]

# Environment variables used across all jobs
env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/healthcare-fastapi
  PYTHON_VERSION: '3.11'

# Jobs run in order (each job = one stage)
jobs:
  
  # =====================================================
  # STAGE 1: BUILD & INSTALL DEPENDENCIES
  # =====================================================
  build-and-install:
    name: 📦 Build & Install Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 💾 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: ⬇️ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dependencies installed successfully"
          
      - name: 📋 List installed packages
        run: pip list

  # =====================================================
  # STAGE 2: CODE QUALITY & SECURITY CHECKS
  # =====================================================
  lint-and-security:
    name: 🔍 Lint & Security Scan
    runs-on: ubuntu-latest
    needs: build-and-install  # Wait for stage 1 to complete
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: ⬇️ Install linting tools
        run: |
          pip install flake8 bandit safety pylint black
          
      - name: 🎨 Check code formatting with Black
        run: |
          black --check app || echo "⚠️ Code needs formatting"
        continue-on-error: true
        
      - name: 🔎 Lint with Flake8
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
        
      - name: 🛡️ Security scan with Bandit
        run: |
          bandit -r app -ll -f json -o bandit-report.json || true
          bandit -r app -ll
        continue-on-error: true
        
      - name: 🔐 Check dependency vulnerabilities
        run: |
          safety check --json || echo "⚠️ Vulnerabilities found (non-blocking)"
        continue-on-error: true
        
      - name: 📊 Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  # =====================================================
  # STAGE 3: AUTOMATED TESTING WITH DATABASE
  # =====================================================
  test:
    name: 🧪 Run Tests with Database Services
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    # These run as separate containers (like docker-compose)
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_healthcare_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: ⬇️ Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
          
      - name: 🗃️ Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "✅ PostgreSQL is ready"
          
      - name: 🧪 Run tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_healthcare_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_ci
          ENVIRONMENT: testing
        run: |
          pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
          echo "✅ All tests passed!"
          
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-healthcare
          
      - name: 📁 Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  # =====================================================
  # STAGE 4: BUILD & PUSH DOCKER IMAGE
  # =====================================================
  build-docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test  # Only runs if tests pass
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
          
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          build-args: |
            BUILDTIME=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}
            
      - name: 📋 Image Details
        run: |
          echo "🐳 Docker Image: ${{ env.DOCKER_IMAGE }}"
          echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}"
          echo "📅 Build Time: $(date)"
          echo "🔗 View on Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/healthcare-fastapi"

  # =====================================================
  # STAGE 5: DEPLOY TO PRODUCTION (CONDITIONAL)
  # =====================================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    # Only deploy when pushing to main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Render
        run: |
          echo "🔄 Triggering deployment to Render..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}")
          if [ $response -eq 200 ] || [ $response -eq 201 ]; then
            echo "✅ Deployment triggered successfully!"
          else
            echo "❌ Deployment failed with status code: $response"
            exit 1
          fi
          
      - name: 📊 Deployment Summary
        run: |
          echo "### 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 *Image*: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 *Time*: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 *Docker Hub*: [View Image](https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/healthcare-fastapi)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ *Status*: Deployed to Production" >> $GITHUB_STEP_SUMMARY
          
      - name: 🔔 Notify deployment
        if: always()
        run: |
          echo "Deployment completed at $(date)"
          echo "Check your Render dashboard for live status"

  # =====================================================
  # SUMMARY JOB: OVERALL PIPELINE STATUS
  # =====================================================
  pipeline-summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-and-install, lint-and-security, test, build-docker]
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "### 🏁 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Install | ${{ needs.build-and-install.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Security | ${{ needs.lint-and-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Commit*: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "*Branch*: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "*Triggered by*: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
